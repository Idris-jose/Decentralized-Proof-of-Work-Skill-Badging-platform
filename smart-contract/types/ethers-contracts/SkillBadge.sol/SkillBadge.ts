/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface SkillBadgeInterface extends Interface {
    getFunction(nameOrSignature: "approve" | "balanceOf" | "getApproved" | "getSkillDetails" | "isApprovedForAll" | "mintSelfSkillBadge" | "mintSkillBadge" | "name" | "owner" | "ownerOf" | "renounceOwnership" | "revokeSkillBadge" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "skills" | "supportsInterface" | "symbol" | "tokenURI" | "totalSupply" | "transferFrom" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "BatchMetadataUpdate" | "MetadataUpdate" | "OwnershipTransferred" | "SkillBadgeMinted" | "SkillBadgeRevoked" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getSkillDetails', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'mintSelfSkillBadge', values: [string, string, string, string]): string;
encodeFunctionData(functionFragment: 'mintSkillBadge', values: [AddressLike, string, string, string, string]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'revokeSkillBadge', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'skills', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSkillDetails', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintSelfSkillBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintSkillBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeSkillBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'skills', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BatchMetadataUpdateEvent {
      export type InputTuple = [_fromTokenId: BigNumberish, _toTokenId: BigNumberish];
      export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
      export interface OutputObject {_fromTokenId: bigint, _toTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MetadataUpdateEvent {
      export type InputTuple = [_tokenId: BigNumberish];
      export type OutputTuple = [_tokenId: bigint];
      export interface OutputObject {_tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SkillBadgeMintedEvent {
      export type InputTuple = [to: AddressLike, tokenId: BigNumberish, skillName: string, skillType: string];
      export type OutputTuple = [to: string, tokenId: bigint, skillName: string, skillType: string];
      export interface OutputObject {to: string, tokenId: bigint, skillName: string, skillType: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SkillBadgeRevokedEvent {
      export type InputTuple = [tokenId: BigNumberish];
      export type OutputTuple = [tokenId: bigint];
      export interface OutputObject {tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SkillBadge extends BaseContract {
    
    connect(runner?: ContractRunner | null): SkillBadge;
    waitForDeployment(): Promise<this>;

    interface: SkillBadgeInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getSkillDetails: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, string, bigint, string, string] & {skillName: string, description: string, timestamp: bigint, issuer: string, skillType: string }],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    mintSelfSkillBadge: TypedContractMethod<
      [uri: string, skillName: string, description: string, skillType: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    mintSkillBadge: TypedContractMethod<
      [to: AddressLike, uri: string, skillName: string, description: string, skillType: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    revokeSkillBadge: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    skills: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, string] & {skillName: string, description: string, timestamp: bigint, issuer: string, skillType: string }],
      'view'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getSkillDetails'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [[string, string, bigint, string, string] & {skillName: string, description: string, timestamp: bigint, issuer: string, skillType: string }],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mintSelfSkillBadge'): TypedContractMethod<
      [uri: string, skillName: string, description: string, skillType: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'mintSkillBadge'): TypedContractMethod<
      [to: AddressLike, uri: string, skillName: string, description: string, skillType: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeSkillBadge'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'skills'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, string] & {skillName: string, description: string, timestamp: bigint, issuer: string, skillType: string }],
      'view'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'BatchMetadataUpdate'): TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
getEvent(key: 'MetadataUpdate'): TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'SkillBadgeMinted'): TypedContractEvent<SkillBadgeMintedEvent.InputTuple, SkillBadgeMintedEvent.OutputTuple, SkillBadgeMintedEvent.OutputObject>;
getEvent(key: 'SkillBadgeRevoked'): TypedContractEvent<SkillBadgeRevokedEvent.InputTuple, SkillBadgeRevokedEvent.OutputTuple, SkillBadgeRevokedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
      BatchMetadataUpdate: TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
    

      'MetadataUpdate(uint256)': TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
      MetadataUpdate: TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'SkillBadgeMinted(address,uint256,string,string)': TypedContractEvent<SkillBadgeMintedEvent.InputTuple, SkillBadgeMintedEvent.OutputTuple, SkillBadgeMintedEvent.OutputObject>;
      SkillBadgeMinted: TypedContractEvent<SkillBadgeMintedEvent.InputTuple, SkillBadgeMintedEvent.OutputTuple, SkillBadgeMintedEvent.OutputObject>;
    

      'SkillBadgeRevoked(uint256)': TypedContractEvent<SkillBadgeRevokedEvent.InputTuple, SkillBadgeRevokedEvent.OutputTuple, SkillBadgeRevokedEvent.OutputObject>;
      SkillBadgeRevoked: TypedContractEvent<SkillBadgeRevokedEvent.InputTuple, SkillBadgeRevokedEvent.OutputTuple, SkillBadgeRevokedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }